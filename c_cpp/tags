!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CALC_HEADER_	calc.h	6;"	d
Data_wrapper	utils.h	/^} Data_wrapper;$/;"	t	typeref:struct:__anon6
Greek_letters	utils.h	/^typedef struct Greek_letters{$/;"	s
Greek_letters	utils.h	/^} Greek_letters;$/;"	t	typeref:struct:Greek_letters
HMM	hmm.h	/^} HMM;$/;"	t	typeref:struct:__anon1
HMM_HEADER_	hmm.h	2;"	d
MAX_LINE	calc.h	21;"	d
MAX_LINE	hmm.h	22;"	d
MAX_OBSERV	calc.h	13;"	d
MAX_OBSERV	hmm.h	14;"	d
MAX_SEQ	calc.h	17;"	d
MAX_SEQ	hmm.h	18;"	d
MAX_STATE	calc.h	9;"	d
MAX_STATE	hmm.h	10;"	d
PARAMETER_TEST	utils.h	/^  PARAMETER_TEST$/;"	e	enum:__anon7
PARAMETER_TRAIN	utils.h	/^  PARAMETER_TRAIN = 0,$/;"	e	enum:__anon7
Parameter_test	utils.h	/^} Parameter_test;$/;"	t	typeref:struct:__anon4
Parameter_train	utils.h	/^} Parameter_train;$/;"	t	typeref:struct:__anon3
Pram_type	utils.h	/^} Pram_type;$/;"	t	typeref:enum:__anon7
UTILS_HEADER_	utils.h	2;"	d
Viterbi	calc.h	/^void* Viterbi( void* ptr \/* of type Viterbi_wrapper *\/ ){$/;"	f
Viterbi_OP	calc.h	/^void Viterbi_OP( FILE* fp, int arr, Parameter_test* pt_ptr ){$/;"	f
Viterbi_letters	utils.h	/^} Viterbi_letters;$/;"	t	typeref:struct:__anon2
Viterbi_wrapper	utils.h	/^} Viterbi_wrapper;$/;"	t	typeref:struct:__anon5
accm_epsilon	calc.h	/^static void* accm_epsilon ( void* ptr \/* (Data_wrapper*) type *\/ ){$/;"	f
accm_gamma	calc.h	/^static void* accm_gamma ( void* ptr \/* (Data_wrapper*) type *\/ ){$/;"	f
alpha	utils.h	/^  double ** alpha      ;  \/\/ alpha [state count][observation index]$/;"	m	struct:Greek_letters
beta	utils.h	/^  double ** beta       ;  \/\/ beta  [state count][observation index]$/;"	m	struct:Greek_letters
calc_A	calc.h	/^static void* calc_A  ( void* ptr \/* type (Data_wrapper*) ) *\/ ){$/;"	f
calc_B	calc.h	/^static void* calc_B  ( void* ptr \/* type (Data_wrapper*) ) *\/ ){$/;"	f
calc_model	calc.h	/^static void calc_model($/;"	f
calc_pi	calc.h	/^static void* calc_pi ( void* ptr \/* type (Data_wrapper*) ) *\/ ){$/;"	f
cur_line_idx	utils.h	/^  int              cur_line_idx;  \/\/ current line index$/;"	m	struct:__anon6
cur_obsv_len	utils.h	/^  int     cur_obsv_len ;$/;"	m	struct:Greek_letters
data_vec_cnt	utils.h	/^  int     data_vec_cnt  ;$/;"	m	struct:__anon4
data_vec_list	utils.h	/^  char**  data_vec_list ;$/;"	m	struct:__anon4
delta	utils.h	/^  double ** delta;$/;"	m	struct:__anon2
discard	utils.h	/^static void discard( void* ptr , Pram_type type){$/;"	f
dumpHMM	hmm.h	/^static void dumpHMM( FILE *fp, HMM *hmm )$/;"	f
dump_models	hmm.h	/^static void dump_models( HMM *hmm, const int num )$/;"	f
emt_cnt	utils.h	/^  int     emt_cnt;     \/\/ how many # of possible emissions.$/;"	m	struct:__anon3
epsilon	utils.h	/^  double *** epsilon   ;  \/\/ [current state], max = (state count)$/;"	m	struct:Greek_letters
fill_alpha	calc.h	/^static void* fill_alpha ( void* ptr \/* (Data_wrapper*) type *\/ ){$/;"	f
fill_alpha_and_beta	calc.h	/^inline static void fill_alpha_and_beta( $/;"	f
fill_beta	calc.h	/^static void* fill_beta ( void* ptr \/* (Data_wrapper*) type *\/ ){$/;"	f
gam_end_arr	utils.h	/^  double ** gam_end_arr;  \/\/ gamma_end of some specific observation$/;"	m	struct:Greek_letters
gamma	utils.h	/^  double ** gamma      ;  \/\/ gamma [state count][observation index-1]$/;"	m	struct:Greek_letters
gamma_arr	utils.h	/^  double *** gamma_arr ;  \/\/ gamma regarding a specific observation$/;"	m	struct:Greek_letters
gamma_end	utils.h	/^  double *  gamma_end  ;  \/\/ col vector of length (state count)$/;"	m	struct:Greek_letters
gr_ptr	utils.h	/^  Greek_letters*   gr_ptr;$/;"	m	struct:__anon6
hmm_ptr	utils.h	/^  HMM*             hmm_ptr;$/;"	m	struct:__anon6
init_greek	calc.h	/^static void init_greek ( Data_wrapper* dw_ptr ){$/;"	f
initial	hmm.h	/^   double initial[MAX_STATE];			\/\/initial prob.$/;"	m	struct:__anon1
it_cnt	utils.h	/^  int     it_cnt;      \/\/ iteration count$/;"	m	struct:__anon3
line_cnt	utils.h	/^  int     line_cnt;    \/\/ total lines in the "model_train" file$/;"	m	struct:__anon3
loadHMM	hmm.h	/^static void loadHMM( HMM *hmm, const char *filename )$/;"	f
load_models	hmm.h	/^static int load_models( const char *listname, HMM *hmm, const int max_num )$/;"	f
load_params	utils.h	/^static void load_params( $/;"	f
main	test_model.c	/^int main( int argc, char** argv )$/;"	f
main	train.c	/^int main( int argc, char** argv )$/;"	f
max_idx	calc.h	/^int   max_idx( long double* ptr, int cnt ) {$/;"	f
mod_name_list	utils.h	/^  char**  mod_name_list ;$/;"	m	struct:__anon4
model_OP	utils.h	/^  char*   model_OP;    \/\/ trained model name$/;"	m	struct:__anon3
model_cnt	utils.h	/^  int     model_cnt     ;$/;"	m	struct:__anon4
model_data	utils.h	/^  char**  model_data;  \/\/ data, i.e. many lines of char$/;"	m	struct:__anon3
model_idx	utils.h	/^  int               model_idx;$/;"	m	struct:__anon5
model_init	utils.h	/^  char*   model_init;  \/\/ init model filename$/;"	m	struct:__anon3
model_list	utils.h	/^  char*   model_list    ;  \/\/ list of HMMs to run Viterbi.$/;"	m	struct:__anon4
model_name	hmm.h	/^   char *model_name;$/;"	m	struct:__anon1
model_train	utils.h	/^  char*   model_train; \/\/ train data filename$/;"	m	struct:__anon3
normalize_model	calc.h	/^static void normalize_model ( Data_wrapper* dw_ptr ){$/;"	f
observ_num	hmm.h	/^   int observ_num;					\/\/number of observation$/;"	m	struct:__anon1
observation	hmm.h	/^   double observation[MAX_OBSERV][MAX_STATE];	\/\/observation prob.$/;"	m	struct:__anon1
open_or_die	hmm.h	/^static FILE *open_or_die( const char *filename, const char *ht )$/;"	f
phi	utils.h	/^  int    ** phi  ; $/;"	m	struct:__anon2
prep_params	utils.h	/^static void prep_params($/;"	f
prob	utils.h	/^  long double prob     ;  \/\/ prob( O | lambda );$/;"	m	struct:Greek_letters
ptr	utils.h	/^  Parameter_test*   ptr;$/;"	m	struct:__anon5
reset_tmp_data	calc.h	/^static void reset_tmp_data( Data_wrapper* dw_ptr ){$/;"	f
results	utils.h	/^  char*   results       ;  \/\/ results$/;"	m	struct:__anon4
state_num	hmm.h	/^   int state_num;					\/\/number of state$/;"	m	struct:__anon1
stt_cnt	utils.h	/^  int     stt_cnt;     \/\/ how many # of hidden states in the HMM.$/;"	m	struct:__anon3
test_data	utils.h	/^  char*   test_data     ;  \/\/ input sequence of char (39-dim MFCCs)$/;"	m	struct:__anon4
test_ptr	utils.h	/^  Parameter_train* test_ptr;$/;"	m	struct:__anon6
total_len	utils.h	/^  size_t  total_len;   \/\/ total observed length $/;"	m	struct:__anon3
train_ptr	utils.h	/^  Parameter_train* train_ptr;$/;"	m	struct:__anon6
transition	hmm.h	/^   double transition[MAX_STATE][MAX_STATE];	\/\/transition prob.$/;"	m	struct:__anon1
